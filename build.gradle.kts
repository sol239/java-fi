plugins {
    id("java")
    id("jacoco") // Apply the JaCoCo plugin
    // id("application") // Keep if you need the application plugin features
}

group = "org.example"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.mockito:mockito-core:5.+")
    testImplementation("org.junit.jupiter:junit-jupiter")
    implementation("org.postgresql:postgresql:42.7.5")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.13.4.2")
    implementation("com.google.auto.service:auto-service-annotations:1.1.1")
    annotationProcessor("com.google.auto.service:auto-service:1.1.1")
}

/* // Keep if you need the application plugin features
application {
    mainClass.set("com.github.sol239.javafi.server.ServerParallel") // Or your actual main class
}
*/

// Configure the test task to use JUnit Platform and generate JaCoCo data
tasks.test {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport) // Run jacocoTestReport after tests
}

// Configure the jacocoTestReport task
tasks.jacocoTestReport {
    dependsOn(tasks.test) // Ensure tests run before report generation

    reports {
        xml.required.set(false) // XML report (optional, disable if not needed)
        csv.required.set(false) // CSV report (optional, disable if not needed)
        html.required.set(true) // HTML report (usually desired) - Output: build/reports/jacoco/test/html
        html.outputLocation.set(layout.buildDirectory.dir("reports/coverage"))

    }

    // Specify source directories and class directories for the report
    // This ensures the report links source code correctly
    val mainSourceSet = sourceSets.main.get()
    sourceDirectories.setFrom(mainSourceSet.allSource.srcDirs)
    classDirectories.setFrom(mainSourceSet.output.classesDirs)

    // Specify execution data - typically generated by the 'test' task
    executionData.setFrom(fileTree(buildDir).include("jacoco/test.exec"))
}